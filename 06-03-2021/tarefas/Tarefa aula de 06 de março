Observação!

Desculpe o atraso professora. espero que ainda dê para considerar.

Para rever se entendeu

1. Assinale a alternativa correta com relação ao estudo de Ponteiros?

[ ] Ponteiro é o valor de uma variável
[ ] Ponteiro é o indicador da próxima veriável a ser passada
[x] Ponteiro é uma variável que armazena endereço
[ ] Ponteiro é o endereço que aponta para uma variável

--------------------------------------------------------

2 - Quais das seguintes instruções declaram um ponteiro para uma variável float?

[x] float *p;
[ ] float p;
[ ] *float p;
[ ] float p*;

--------------------------------------------------------

Continuando

1. Verifique se há erros no código a seguir, em case afirmativos, como seria a correção.

int main() {
    int x, *p;
    x = 100;
    p = x;
    printf("Valor de p: %d.\n", *p)
    return 0;
}

Erro x Correções:
    - 1º Erro: Para executar o metodo 'printf', é necessário fazer a inclusão da lib 'stdio.h'
    - Correção: Declarar o include.
	#include <stdio.h>

    - 2º Erro: p = x; a variável 'p' é um ponteiro de inteiro, logo ele deve receber a refência (&) da variável x
         Um ponteiro armazena endereços de variáveis, e não valores absolutos das varíavels.

    - Correção: Atribuir para p o endereço da variável x, utilizando o operador de referência &.
	p = &x;

--------------------------------------------------------

2. Suponha que os elementos de um vetor v são do tipo inte cada intocupa 8 bytes no seu computador. Se o endereço de v[0] é 55000, qual o valor da expressão v + 4?

Resposta: 55032

3. código:

#include <stdio.h>

int main() {
    int a = 5, b = 12, c;
    int *p;
    int *q;
    p = &a;
    q = &b;
    c = *p + *q;
    printf("c = %d", c);
}

Seja o trecho de código acima que valor de c será impresso no comando printf?

c = 17


-------------------------------------------------------

# Agora vamos programar um pouco

1.Implemente uma função que recebe um número real passado valor, retorne a parte inteira e a parte fracionaria desse número. Depois, implemente a função mainque chama essa função.Protótipo:

void partes (float num, int *inteiro, float *fracionaria);

// Código

#include <stdio.h>
#include <stdlib.h>

/*
    1.Implemente uma função que recebe um número real passado valor,
    retorne a parte inteira e a parte fracionaria desse número.
    Depois, implemente a função mainque chama essa função.Protótipo:

    void partes (float num, int *inteiro, float *fracionaria);
*/

/* Protótipo da função */
void partes(float num, int *inteiro, float *fracionaria);

int main() {

float num;
int *pi;

pi = (int *) malloc(sizeof(int));

float *pf;
pf = (float *) malloc(sizeof(float));

int parte_inteira;
float parte_fracionada;

pi = &parte_inteira;
pf = &parte_fracionada;

printf("Digite um numero real: ");
scanf("%f", &num);

partes(num, pi, pf);

printf("Numero real: %.4f\n", num);
printf("Parte inteira: %d\n", parte_inteira);
printf("Parte fracionada: %.4f\n", parte_fracionada);

return 0;

}

void partes(float num, int *inteiro, float *fracionaria) {
    *inteiro = (int) num;
    *fracionaria = num - ((int) num);
}


-------------------------------------------------------

2.Implemente uma função que calcula a área da superfície e o volume de uma esfera de raio r. Essa função deve obedecer ao protótipo:

voidcalc_esfera(floatr, float*area, float*volume);

A área da superfície e o volume são dados, respectivamente, por:
    A = 4 ∗p ∗R2
    V = 4/3 ∗p ∗R3


// Código

#include <stdio.h>
#include <math.h>
#include <stdlib.h>

/* Protótipo da função */
void calc_esfera(float r, float *area, float *volume);

int main() {
    float raio = 0;
    float a = 0;
    float v = 0;
    
    float *pa;
    pa = (float *) malloc(sizeof(float *));
    
    float *pv;
    pv = (float *) malloc(sizeof(float *));

    pa = &a;
    pv = &v;

    printf("Digite o valor do raio: ");
    scanf("%f", &raio);

    calc_esfera(raio, pa, pv);

    printf("Area da esfera: %.2f\n", a);
    printf("Volume da esfera: %.2f", v);

    return 0;
}

void calc_esfera(float r, float *area, float *volume) {
    float pi = 3.14159;
    *area = 4.0 * pi * pow(r, 2);
    *volume = 4.0/3 * pi * pow(r, 3);
}



-------------------------------------------------------

3.Implemente uma função que recebe como parâmetro um array de inteiros com n valores e determina
o maior elemento do array e o número de vezes que esse elemento ocorreu no array.
Por exemplo, para o array {5, 2, 15, 3, 7, 15, 8, 6, 15}, a função deve retornar para a função
que a chamou o valor 15 e o número 3, indicando que o número 15 ocorreu 3 vezes.
A função deve ser do tipo void.

#include <stdio.h>
#include <stdlib.h>

/* Protótipo da função */
void preeche_vetor(int *vetor, int n);

void maior_elemento(int *vetor, int n, int *pv, int *maior);

int main() {
    int tam = 0;
    
    int m = 0;
    int *pm = (int *) malloc(sizeof(int));
    pm = &m;

    int vezes = 0;
    int *pv = (int *) malloc(sizeof(int));
    pv = &vezes;

    printf("Qual o tamanho do vetor: ");
    scanf("%d", &tam);
    int *v = (int *) malloc(tam * sizeof(int));

    preeche_vetor(v, tam);
    maior_elemento(v, tam, pv, pm);

    printf("\nMaior elemento do vetor: %d\n", m);
    printf("Ocorrencias: %d", vezes);

    return 0;
}

void preeche_vetor(int *vetor, int n) {
    for (int i = 0; i < n; i++) {
        printf("Preencha a posicao %d do vetor: ", i + 1);
        scanf("%d", &vetor[i]);
    }
}

void maior_elemento(int *vetor, int n, int *pv, int *maior) {
    int conte = 0;
    int maior_num = 0;

    for (int i = 0; i < n; i++) {
        if (vetor[i] > maior_num) {
            maior_num = vetor[i];
        }
    }

    for (int i = 0; i < n; i++) {
        if (vetor[i] == maior_num) {
            conte += 1;
        }
    }

    *pv = conte;
    *maior = maior_num;    
}

